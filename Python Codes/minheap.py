# -*- coding: utf-8 -*-
"""MinHeap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A5Ehaq5DoufXQWygKwQNzbeugd2q0Gba
"""

import numpy as np

class MinHeap:
    def __init__(self, arr_size):
        self.arr = np.zeros(arr_size+1, dtype = int);  # heap Array
        self.index = 1                    # to indicate blank index

    def insert(self, inserted_value): #
        if self.index >= len(self.arr):
            print("Heap is full")
            return
        self.arr[self.index] = inserted_value
        self.swim(self.index)
        self.index += 1
        print(inserted_value, "Added Successfully!")

    def swim(self, current_index):
        if current_index == 1: #root
            return

        parent_index = current_index//2
        if self.arr[parent_index] > self.arr[current_index]:
            temp = self.arr[parent_index]
            self.arr[parent_index] = self.arr[current_index]
            self.arr[current_index] = temp
            self.swim(parent_index)
            return

    def remove(self):
        if self.index <= 1:
            print("Heap is empty")
            return
        self.index -= 1
        min_value = self.arr[1]
        self.arr[1] = self.arr[self.index]
        self.arr[self.index] = 0
        self.sink(1)
        print("Removed:", min_value)
        return min_value

    def sink(self, current_index):
        if current_index >= self.index:
            return
        left_child_indx = 2*current_index
        right_child_indx = 2*current_index+1
        if left_child_indx >= self.index:    # out of bound (Left child not exists)
            return
        else:
            if right_child_indx >= self.index: # out of bound (right child not exists)
                if self.arr[current_index] > self.arr[left_child_indx]:
                    temp = self.arr[current_index]
                    self.arr[current_index] = self.arr[left_child_indx]
                    self.arr[left_child_indx] = temp
                    self.sink(left_child_indx)
            else:
                if self.arr[left_child_indx] < self.arr[right_child_indx]:
                    if self.arr[left_child_indx] < self.arr[current_index]:
                        temp = self.arr[current_index]
                        self.arr[current_index] = self.arr[left_child_indx]
                        self.arr[left_child_indx] = temp
                        self.sink(left_child_indx)
                else:
                    if self.arr[right_child_indx] < self.arr[current_index]:
                        temp = self.arr[current_index]
                        self.arr[current_index] = self.arr[right_child_indx]
                        self.arr[right_child_indx] = temp
                        self.sink(right_child_indx)


######### Driver Code ###########
MH = MinHeap(15)
MH.insert(10)
MH.insert(7)
MH.insert(1)
MH.insert(5)
MH.insert(3)
print("Min Heap Array", MH.arr)
MH.remove()
MH.remove()
MH.remove()
print("Min Heap Array", MH.arr)


a = np.array([8, 17, 3, 5, 3, 1, 7], dtype = int)
hq = MinHeap(10)
for i in range(len(a)):
    hq.insert(a[i])
for j in range(len(a)):
    a[j] = hq.remove()



















MH.remove()

MH.arr



